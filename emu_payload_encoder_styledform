<!DOCTYPE html>
<html lang="en">
<head>
    <title>EMU Professional II LoRa-Payload Encoder</title>
    <meta charset="UTF-8">
    <!-- Meta viewport tag for responsiveness -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Optional: Include a Google Font -->
    <link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;700&display=swap" rel="stylesheet">

    <style>
        /* Root variables for customizable color schemes */
        :root {
            --primary-color: #0069b4;
            --primary-color-hover: #005a9b;
            --secondary-color: #b6b9be;
            --background-color: #ffffff;
            --text-color: #333333;
            --heading-color: #0069b4;
            --error-color: #ff0000;
        }

        body {
            font-family: 'Raleway', sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--background-color);
            color: var(--text-color);
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            justify-content: space-between;
        }

        .header img {
            max-width: 150px;
            height: auto;
        }

        h1 {
            font-size: 2em;
            color: var(--heading-color);
            margin: 0.5em 0;
        }

        .payload-output {
            margin: 1em 0;
        }

        .payload-output div {
            margin-bottom: 1em;
        }

        .payload-output b {
            display: block;
            margin-bottom: 0.5em;
        }

        #data {
            display: flex;
            flex-wrap: wrap;
            gap: 1em;
        }

        .form-group {
            display: flex;
            align-items: center;
            width: calc(50% - 1em);
        }

        .form-group input[type="checkbox"] {
            margin-right: 0.5em;
        }

        .form-group label {
            margin: 0;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .form-group {
                width: calc(100% - 1em);
            }
        }

        /* Optional: Styling inputs */
        input[type="number"] {
            width: 5em;
            margin-right: 0.5em;
        }

        /* Error class */
        .error {
            border-color: var(--error-color);
        }

        /* Adjust the number input and label alignment */
        .number-input-group {
            display: flex;
            align-items: center;
            margin-bottom: 1em;
        }

        .number-input-group label {
            margin-left: 0.5em;
        }

        /* Adjust the checkbox for 'Uplink should be confirmed' */
        .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 1em;
        }

        .checkbox-group input[type="checkbox"] {
            margin-right: 0.5em;
        }

        /* Heading for datalogger entries */
        h2 {
            width: 100%;
            margin-top: 1em;
            font-size: 1.5em;
            color: var(--heading-color);
        }

    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>EMU Professional II LoRa-Payload Encoder</h1>
            <img alt="EMULogo" src="https://www.emuag.ch/profII/EMU.svg" />
        </div>

        <div class="payload-output">
            <div>
                <b>Payload base64-encoded:</b>
                <div id="ergebnisbase64">no data selected</div>
            </div>
            <div>
                <b>Payload hex-encoded:</b>
                <div id="ergebnis">no data selected</div>
            </div>
            <div>
                <b>Payload hex-encoded without leading 0x:</b>
                <div id="ergebnishex">no data selected</div>
            </div>
        </div>

        <form id="data" onsubmit="doWork(); return false;">
            <div class="number-input-group">
                <input type="number" min="1" max="65535" oninput="validity.valid||(value='');" onchange="doWork(); return false;" name="fInterval" id="fInterval" value="15">
                <label for="fInterval">Interval in minutes (from 1 to 65535)</label>
            </div>
            <div class="checkbox-group">
                <input type="checkbox" onchange="doWork();" name="fPortConfirmed" id="fPortConfirmed">
                <label for="fPortConfirmed">Uplink should be confirmed</label>
            </div>

            <h2>Datalogger Entries to Send:</h2>
            <!-- The checkboxes will be generated by JavaScript -->
        </form>
    </div>

    <script lang="javascript">
        var dataTypes = [];
        dataTypes[0x00] = { 'len': 4, 'description': 'data-logger-index', 'dataType': 'Uint32' };
        dataTypes[0x01] = { 'len': 4, 'description': 'timestamp', 'dataType': 'Uint32', 'unit': 'seconds' };
        // ... (rest of your dataTypes)

        // Generate checkboxes dynamically
        for (var x = 0; x < dataTypes.length; x++) {
            if (dataTypes[x]) {
                var myDiv = document.createElement("div");
                myDiv.classList.add("form-group");

                var myInput = document.createElement("input");
                myInput.setAttribute("type", "checkbox");
                myInput.setAttribute("id", "f" + dataTypes[x]['description']);
                myInput.setAttribute("name", "f" + dataTypes[x]['description']);
                myInput.setAttribute("onClick", "doWork(); ");
                myInput.value = x;

                var myLabel = document.createElement("label");
                myLabel.setAttribute("for", "f" + dataTypes[x]['description']);
                myLabel.innerHTML = dataTypes[x]['description'];

                myDiv.appendChild(myInput);
                myDiv.appendChild(myLabel);

                document.getElementById("data").appendChild(myDiv);
            }
        }

        function clearInput() {
            const form = document.getElementById('data');
            Array.from(form.elements).forEach(element => {
                element.checked = false; element.disabled = false;
            });
            document.getElementById('ergebnis').innerHTML = "no data selected";
            document.getElementById('ergebnisbase64').innerHTML = "no data selected";
            document.getElementById('ergebnishex').innerHTML = "no data selected";
        }

        function doWork() {
            var data = {
                'fPort': 1,
                'timeInterval': 15,
                'sndAck': false,
                'startReJoin': false,
                'portIsActive': true,
                'values': []
            }
            let iMax = 10;
            var iCounter = 0;
            const form = document.getElementById('data')
            Array.from(form.elements).forEach(element => {
                element.disabled = false;
                if (element.checked && !element.disabled) {
                    if (element.id === "fPortConfirmed") {
                        data.sndAck = true;
                    }
                    else {
                        data.values.push(parseInt(element.value));
                        iCounter = iCounter + 1;
                    }
                }
            });

            if (iCounter >= iMax) {
                Array.from(form.elements).forEach(element => {
                    if ((element.id !== 'fInterval') && (element.id !== 'fPortConfirmed')) {
                        if (!element.checked) { element.disabled = true; }
                    }
                });
            }
            data.timeInterval = parseInt(document.getElementById('fInterval').value);

            erg = Encode(1, data, {});

            document.getElementById('ergebnis').innerHTML = toHexString(erg, true);
            document.getElementById('ergebnishex').innerHTML = toHexString(erg, false);
            document.getElementById('ergebnisbase64').innerHTML = base64EncArr(erg);
        }

        // ... (rest of your JavaScript functions like Encode, crc8_encode, etc.)

        // Initialize the form by calling doWork()
        doWork();

    </script>
</body>
</html>
